{"ast":null,"code":"import axios from 'axios';\nimport { urlFunction } from '../utils/urls';\nexport let userContext = async () => {\n  try {\n    const user = await localStorage.getItem('user');\n\n    if (user !== null) {\n      return user;\n    } else {\n      return null;\n    }\n  } catch (error) {}\n}; // Get user by id \n\nexport let getUserById = async (id_user, token) => {\n  let res = await axios.get(\"\".concat(urlFunction(), \"/user/\").concat(id_user), {\n    headers: {\n      Authorization: 'bearer ' + token\n    }\n  });\n  let data = res.data;\n  return data != null ? data : [];\n}; // Get user pagination\n\nexport let getUserAll = async (limit, offset) => {\n  let d = {\n    limit,\n    offset\n  };\n  let res = await axios.post(\"\".concat(urlFunction(), \"/users/pagination\"), d);\n  let data = res.data;\n  return data != null ? data : [];\n}; // Get user pagination\n\nexport let getUserOwnerRestaurant = async token => {\n  // let d = {\n  //   limit, offset\n  // } \n  let res = await axios.get(\"\".concat(urlFunction(), \"/restaurant/all/owner\"), {\n    headers: {\n      Authorization: 'bearer ' + token\n    }\n  });\n  let data = res.data;\n  return data != null ? data : [];\n}; //Get user count\n\nexport let getUserCount = async token => {\n  let res = await axios.get(\"\".concat(urlFunction(), \"/users/count/data\"), {\n    headers: {\n      Authorization: 'bearer ' + token\n    }\n  });\n  let data = res.data;\n  return data != null ? data : [];\n}; // Get bank info by id user \n\nexport let getBankInfoByUserId = async (id_user, token) => {\n  let res = await axios.get(\"\".concat(urlFunction(), \"/restaurant/user/bank_info/\").concat(id_user), {\n    headers: {\n      Authorization: 'bearer ' + token\n    }\n  });\n  let data = res.data;\n  return data != null ? data : [];\n};","map":{"version":3,"sources":["/opt/management-taptapnow/src/utils/userContext.js"],"names":["axios","urlFunction","userContext","user","localStorage","getItem","error","getUserById","id_user","token","res","get","headers","Authorization","data","getUserAll","limit","offset","d","post","getUserOwnerRestaurant","getUserCount","getBankInfoByUserId"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AAGA,OAAO,IAAIC,WAAW,GAAG,YAAY;AACjC,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAnB;;AACA,QAAIF,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAOA,IAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAPD,CAOE,OAAOG,KAAP,EAAc,CAAE;AACrB,CATM,C,CAYP;;AACA,OAAO,IAAIC,WAAW,GAAG,OAAOC,OAAP,EAAgBC,KAAhB,KAA0B;AACjD,MAAIC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,WAAaV,WAAW,EAAxB,mBAAmCO,OAAnC,GAChB;AACEI,IAAAA,OAAO,EAAG;AACRC,MAAAA,aAAa,EAAI,YAAYJ;AADrB;AADZ,GADgB,CAAhB;AAMA,MAAIK,IAAI,GAAGJ,GAAG,CAACI,IAAf;AACA,SAAOA,IAAI,IAAI,IAAR,GAAgBA,IAAhB,GAAsB,EAA7B;AACD,CATM,C,CAYP;;AACA,OAAO,IAAIC,UAAU,GAAG,OAAOC,KAAP,EAAcC,MAAd,KAAyB;AAC/C,MAAIC,CAAC,GAAG;AACNF,IAAAA,KADM;AACCC,IAAAA;AADD,GAAR;AAGA,MAAIP,GAAG,GAAG,MAAMV,KAAK,CAACmB,IAAN,WAAclB,WAAW,EAAzB,wBAA+CiB,CAA/C,CAAhB;AACA,MAAIJ,IAAI,GAAGJ,GAAG,CAACI,IAAf;AACA,SAAOA,IAAI,IAAI,IAAR,GAAgBA,IAAhB,GAAsB,EAA7B;AACD,CAPM,C,CAWP;;AACA,OAAO,IAAIM,sBAAsB,GAAG,MAAOX,KAAP,IAAiB;AACnD;AACA;AACA;AACA,MAAIC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,WAAaV,WAAW,EAAxB,4BAChB;AACEW,IAAAA,OAAO,EAAG;AACRC,MAAAA,aAAa,EAAI,YAAYJ;AADrB;AADZ,GADgB,CAAhB;AAOA,MAAIK,IAAI,GAAGJ,GAAG,CAACI,IAAf;AACA,SAAOA,IAAI,IAAI,IAAR,GAAgBA,IAAhB,GAAsB,EAA7B;AACD,CAbM,C,CAiBP;;AACA,OAAO,IAAIO,YAAY,GAAG,MAAOZ,KAAP,IAAiB;AACzC,MAAIC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,WAAaV,WAAW,EAAxB,wBAA8C;AAC5DW,IAAAA,OAAO,EAAG;AACRC,MAAAA,aAAa,EAAI,YAAYJ;AADrB;AADkD,GAA9C,CAAhB;AAKA,MAAIK,IAAI,GAAGJ,GAAG,CAACI,IAAf;AACA,SAAOA,IAAI,IAAI,IAAR,GAAgBA,IAAhB,GAAsB,EAA7B;AACD,CARM,C,CAUP;;AACA,OAAO,IAAIQ,mBAAmB,GAAG,OAAOd,OAAP,EAAgBC,KAAhB,KAA0B;AACzD,MAAIC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,WAAaV,WAAW,EAAxB,wCAAwDO,OAAxD,GAChB;AACEI,IAAAA,OAAO,EAAG;AACRC,MAAAA,aAAa,EAAI,YAAYJ;AADrB;AADZ,GADgB,CAAhB;AAMA,MAAIK,IAAI,GAAGJ,GAAG,CAACI,IAAf;AACA,SAAOA,IAAI,IAAI,IAAR,GAAgBA,IAAhB,GAAsB,EAA7B;AACD,CATM","sourcesContent":["\nimport axios from 'axios';\nimport { urlFunction } from '../utils/urls';\n\n\nexport let userContext = async () => {\n    try {\n      const user = await localStorage.getItem('user');\n      if (user !== null) {\n        return user;\n      } else {\n        return null;\n      }\n    } catch (error) {}\n};\n  \n\n// Get user by id \nexport let getUserById = async (id_user, token) => {\n  let res = await axios.get(`${urlFunction()}/user/${id_user}`,\n  {\n    headers : {\n      Authorization  : 'bearer ' + token,\n    },\n    });  \n  let data = res.data\n  return data != null  ? data :[]\n}\n\n\n// Get user pagination\nexport let getUserAll = async (limit, offset) => {\n  let d = {\n    limit, offset\n  } \n  let res = await axios.post(`${urlFunction()}/users/pagination`,d);  \n  let data = res.data\n  return data != null  ? data :[]\n}\n\n\n\n// Get user pagination\nexport let getUserOwnerRestaurant = async (token) => {\n  // let d = {\n  //   limit, offset\n  // } \n  let res = await axios.get(`${urlFunction()}/restaurant/all/owner`,\n  {\n    headers : {\n      Authorization  : 'bearer ' + token,\n    },\n    }\n  );  \n  let data = res.data\n  return data != null  ? data :[]\n}\n\n\n\n//Get user count\nexport let getUserCount = async (token) => {\n  let res = await axios.get(`${urlFunction()}/users/count/data`,{\n    headers : {\n      Authorization  : 'bearer ' + token,\n    },\n    });  \n  let data = res.data\n  return data != null  ? data :[]\n}\n\n// Get bank info by id user \nexport let getBankInfoByUserId = async (id_user, token) => {\n  let res = await axios.get(`${urlFunction()}/restaurant/user/bank_info/${id_user}`,\n  {\n    headers : {\n      Authorization  : 'bearer ' + token,\n    },\n    });  \n  let data = res.data\n  return data != null  ? data :[]\n}"]},"metadata":{},"sourceType":"module"}